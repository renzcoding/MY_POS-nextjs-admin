// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Gender {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  userId      Int
  user        User?      @relation(fields: [userId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Customer    Customer[]

  @@map("gender") // 
}

model Civil_Status {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  userId      Int
  user        User?      @relation(fields: [userId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Customer    Customer[]

  @@map("civil_status") // 
}

model Payment_Method {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  userId      Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id])

  @@map("payment_method") // 
}

model Country {
  id        Int        @id @default(autoincrement())
  name      String
  isoCode   String     @unique
  flag      String?
  phonecode String?
  currency  String?
  latitude  String?
  longitude String?
  timezones String?
  states    State[]
  Customer  Customer[]
  Cashier   Cashier[]
  Supplier  Supplier[]
  User      User[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model State {
  id          Int        @id @default(autoincrement())
  name        String?
  isoCode     String?    @unique
  countryCode String?
  countryId   Int?
  latitude    String?
  longitude   String?
  country     Country?   @relation(fields: [countryId], references: [id])
  cities      City[]
  Customer    Customer[]
  Cashier     Cashier[]
  Supplier    Supplier[]
  User        User[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model City {
  id          Int        @id @default(autoincrement())
  name        String
  isoCode     String?    @unique
  stateId     Int
  countryCode String?
  stateCode   String?
  latitude    String?
  longitude   String?
  state       State      @relation(fields: [stateId], references: [id])
  District    District[]
  Customer    Customer[]
  Cashier     Cashier[]
  Supplier    Supplier[]
  User        User[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

/**
 * model Country {
 * id        Int        @id @default(autoincrement())
 * name      String
 * code      String     @unique // e.g., US, ID
 * State     State[]
 * Customer  Customer[]
 * Cashier   Cashier[]
 * Supplier  Supplier[]
 * User      User[]
 * createdAt DateTime   @default(now())
 * updatedAt DateTime   @updatedAt
 * }
 * model State {
 * id        Int        @id @default(autoincrement())
 * name      String
 * code      String? // optional, e.g., CA for California
 * countryId Int
 * country   Country    @relation(fields: [countryId], references: [id])
 * City      City[]
 * Customer  Customer[]
 * Cashier   Cashier[]
 * Supplier  Supplier[]
 * User      User[]
 * createdAt DateTime   @default(now())
 * updatedAt DateTime   @updatedAt
 * }
 * model City {
 * id        Int        @id @default(autoincrement())
 * name      String
 * stateId   Int
 * state     State      @relation(fields: [stateId], references: [id])
 * District  District[]
 * Customer  Customer[]
 * Cashier   Cashier[]
 * Supplier  Supplier[]
 * User      User[]
 * createdAt DateTime   @default(now())
 * updatedAt DateTime   @updatedAt
 * }
 */

model District {
  id         Int          @id @default(autoincrement())
  name       String
  cityId     Int
  city       City         @relation(fields: [cityId], references: [id])
  PostalCode PostalCode[]
  Customer   Customer[]
  Cashier    Cashier[]
  Supplier   Supplier[]
  User       User[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model PostalCode {
  id         Int        @id @default(autoincrement())
  code       String // e.g., 90210
  districtId Int
  district   District   @relation(fields: [districtId], references: [id])
  Customer   Customer[]
  Cashier    Cashier[]
  Supplier   Supplier[]
  User       User[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@map("postal_code")
}

model Product_Category {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  userId      Int?
  user        User?      @relation(fields: [userId], references: [id])
  Product     Product[]
  Supplier    Supplier[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Product_Condition {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  userId      Int?
  user        User?     @relation(fields: [userId], references: [id])
  Product     Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("product_condition")
}

model Product_Size {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  userId      Int?
  user        User?     @relation(fields: [userId], references: [id])
  Product     Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("product_size") // 
}

model Product_Type {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  userId      Int?
  user        User?     @relation(fields: [userId], references: [id])
  Product     Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("product_type") // 
}

model Product_Unit {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  userId      Int?
  user        User?     @relation(fields: [userId], references: [id])
  Product     Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("product_unit") // 
}

model Product_Weight {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  userId      Int?
  user        User?     @relation(fields: [userId], references: [id])
  Product     Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("product_weight") // 
}

model Product_Images {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  url         String?
  productId   Int?
  description String?
  userId      Int?
  user        User?     @relation(fields: [userId], references: [id])
  Product     Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("product_images") // 
}

model Product_Variant {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  price       Int?
  productId   Int?
  image       Int?
  description String?
  userId      Int?
  user        User?     @relation(fields: [userId], references: [id])
  Product     Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("product_variant") // 
}

model Product {
  id                  Int                @id @default(autoincrement())
  name                String
  price_sales         Int?
  price_purchase      Int?
  tax_sales           Int?
  tax_purchase        Int?
  stock               Int?
  weight              Int?
  supplierId          Int?
  product_CategoryId  Int?
  product_ConditionId Int?
  product_SizeId      Int?
  product_TypeId      Int?
  product_UnitId      Int?
  product_ImagesId    Int?
  product_WeightId    Int?
  product_VariantId   Int?
  barcode             String?
  discount            String?
  image               String?
  description         String?
  status              String?
  userId              Int?
  isActive            Boolean            @default(true)
  isPopular           Boolean            @default(false)
  Product_Category    Product_Category?  @relation(fields: [product_CategoryId], references: [id])
  Product_Condition   Product_Condition? @relation(fields: [product_ConditionId], references: [id])
  Product_Size        Product_Size?      @relation(fields: [product_SizeId], references: [id])
  Product_Type        Product_Type?      @relation(fields: [product_TypeId], references: [id])
  Product_Unit        Product_Unit?      @relation(fields: [product_UnitId], references: [id])
  Product_Weight      Product_Weight?    @relation(fields: [product_WeightId], references: [id])
  Product_Images      Product_Images?    @relation(fields: [product_ImagesId], references: [id])
  Product_Variant     Product_Variant?   @relation(fields: [product_VariantId], references: [id])
  User                User?              @relation(fields: [userId], references: [id])
  Supplier            Supplier?          @relation(fields: [supplierId], references: [id])
  OrderDetail         OrderDetail[]
  Post                Post[]
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model User {
  id                 Int                  @id @default(autoincrement())
  firstname          String?
  lastname           String?
  username           String               @unique
  email              String               @unique
  password           String               @map("user_password")
  role               String?
  address            String?
  countryId          Int?
  stateId            Int?
  cityId             Int?
  districtId         Int?
  postalCodeId       Int?
  position           String?
  phone              String?
  image              String?
  status             String?
  Gender             Gender[]
  Civil_Status       Civil_Status[]
  Product_Category   Product_Category[]
  Product_Condition  Product_Condition[]
  Product_Size       Product_Size[]
  Product_Type       Product_Type[]
  Product_Unit       Product_Unit[]
  Product_Weight     Product_Weight[]
  Product_Images     Product_Images[]
  Product_Variant    Product_Variant[]
  Product            Product[]
  Cashier            Cashier[]
  Supplier           Supplier[]
  Customer           Customer[]
  Membership_type    Membership_type[]
  Order              Order[]
  Transaction_type   Transaction_type[]
  Transaction_status Transaction_status[]
  Post               Post[]
  Payment_Method     Payment_Method[]
  Country            Country?             @relation(fields: [countryId], references: [id])
  State              State?               @relation(fields: [stateId], references: [id])
  City               City?                @relation(fields: [cityId], references: [id])
  District           District?            @relation(fields: [districtId], references: [id])
  PostalCode         PostalCode?          @relation(fields: [postalCodeId], references: [id])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model Cashier {
  id           Int         @id @default(autoincrement())
  name         String?
  username     String?
  email        String      @unique
  password     String
  barcode      String?
  mobile       String?
  telp         String?
  contact      String?
  fax          String?
  address      String?
  countryId    Int?
  stateId      Int?
  districtId   Int?
  postalCodeId Int?
  cityId       Int?
  status       String?
  userId       Int?
  User         User?       @relation(fields: [userId], references: [id])
  Customer     Customer[]
  Order        Order[]
  Country      Country?    @relation(fields: [countryId], references: [id])
  State        State?      @relation(fields: [stateId], references: [id])
  City         City?       @relation(fields: [cityId], references: [id])
  District     District?   @relation(fields: [districtId], references: [id])
  PostalCode   PostalCode? @relation(fields: [postalCodeId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Supplier {
  id                 Int               @id @default(autoincrement())
  name               String?
  email              String            @unique
  phone              String?
  mobile             String?
  telp               String?
  contact            String?
  fax                String?
  position           String?
  address            String?
  product_CategoryId Int?
  countryId          Int?
  stateId            Int?
  cityId             Int?
  districtId         Int?
  postalCodeId       Int?
  status             String?
  userId             Int?
  Product            Product[]
  User               User?             @relation(fields: [userId], references: [id])
  Product_Category   Product_Category? @relation(fields: [product_CategoryId], references: [id])
  Country            Country?          @relation(fields: [countryId], references: [id])
  State              State?            @relation(fields: [stateId], references: [id])
  City               City?             @relation(fields: [cityId], references: [id])
  District           District?         @relation(fields: [districtId], references: [id])
  PostalCode         PostalCode?       @relation(fields: [postalCodeId], references: [id])
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
}

model Customer {
  id                    Int              @id @default(autoincrement())
  name                  String?
  firstname             String?
  lastname              String?
  birthday              DateTime?
  genderId              Int?
  civil_StatusId        Int?
  nationality           Int?
  email                 String           @unique
  phone                 String?
  mobile                String?
  telp                  String?
  fax                   String?
  address               String?
  cityId                Int?
  stateId               Int?
  countryId             Int?
  districtId            Int?
  postalCodeId          Int?
  companyName           String?
  companyAddress        String?
  companyCityId         Int?
  companyStateId        Int?
  companyContryId       Int?
  companypostalCodeId   Int?
  membership_typeId     Int?
  alternativeCustomerId String?
  cashierId             Int?
  startDate             DateTime?
  expiryDate            DateTime?
  taxNumber             String?
  notes                 String?
  status                String?
  userId                Int?
  Gender                Gender?          @relation(fields: [genderId], references: [id])
  Civil_Status          Civil_Status?    @relation(fields: [civil_StatusId], references: [id])
  Country               Country?         @relation(fields: [countryId], references: [id])
  State                 State?           @relation(fields: [stateId], references: [id])
  City                  City?            @relation(fields: [cityId], references: [id])
  District              District?        @relation(fields: [districtId], references: [id])
  PostalCode            PostalCode?      @relation(fields: [postalCodeId], references: [id])
  User                  User?            @relation(fields: [userId], references: [id])
  Cashier               Cashier?         @relation(fields: [cashierId], references: [id])
  Membership_type       Membership_type? @relation(fields: [membership_typeId], references: [id])
  Order                 Order[]
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
}

model Membership_type {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  userId      Int
  User        User       @relation(fields: [userId], references: [id])
  Customer    Customer[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("membership_type") // 
}

model Order {
  id                   Int                 @id @default(autoincrement())
  customerId           Int
  cashierId            Int?
  totalAmount          Decimal
  orderDate            DateTime            @default(now())
  transaction_statusId Int?
  userId               Int
  User                 User                @relation(fields: [userId], references: [id])
  Cashier              Cashier?            @relation(fields: [cashierId], references: [id])
  Customer             Customer            @relation(fields: [customerId], references: [id])
  OrderDetail          OrderDetail[]
  Transaction          Transaction[]
  Transaction_status   Transaction_status? @relation(fields: [transaction_statusId], references: [id])
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model OrderDetail {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  subtotal  Decimal
  Product   Product @relation(fields: [productId], references: [id])
  Order     Order   @relation(fields: [orderId], references: [id])
}

model Transaction_type {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  userId      Int
  User        User          @relation(fields: [userId], references: [id])
  Transaction Transaction[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("transaction_type") // 
}

model Transaction_status {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  userId      Int
  User        User          @relation(fields: [userId], references: [id])
  Order       Order[]
  Transaction Transaction[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("transaction_status") // 
}

model Transaction {
  id                   Int                 @id @default(autoincrement())
  orderId              Int
  paymentType          String
  amount               Decimal
  transaction_typeId   Int?
  transaction_statusId Int?
  transactionDate      DateTime            @default(now())
  Order                Order               @relation(fields: [orderId], references: [id])
  Transaction_type     Transaction_type?   @relation(fields: [transaction_typeId], references: [id])
  Transaction_status   Transaction_status? @relation(fields: [transaction_statusId], references: [id])
}

model Report {
  id          Int         @id @default(autoincrement())
  date        DateTime    @default(now())
  totalSales  Decimal
  totalOrders Int
  Analytics   Analytics[]
}

model Analytics {
  id       Int    @id @default(autoincrement())
  reportId Int
  trend    String
  report   Report @relation(fields: [reportId], references: [id])
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  Int
  productId Int?
  author    User     @relation(fields: [authorId], references: [id])
  Product   Product? @relation(fields: [productId], references: [id])
}
